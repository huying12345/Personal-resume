1、W3C标准
答：需要声明（DOCTYPE）文档类型，便于浏览器准确的解释；需要定义语言编码，如果不声明页面可能会乱码；
JavaScript定义，<script language="javascript" type="text/javascript">CSS必须要用<style type=“text/css”>开头来定义，为保证各浏览器的兼容性来开头定义，以保证在不支持js的浏览器上直接显示出来；
CSS必须要用<style type=“text/css”>开头来定义，为保证各浏览器的兼容性；
所有标签的元素和属性名字都必须使用小写，属性要有对应的属性值，没有默认等于自身，每个标签都要有结束标记，特殊符号要用编码来标识等等

2、媒体查询
答：@media查询。@media mediatype and|not|only (media feature) {CSS Code;}
@media screen and (max-width: 300px) {
  .title {
    color: red
  }
}

3、ES5和ES6的区别
答：1）模块引用，Es5是通过require进行，Es6是通过import
2）导出单个类，Es5是module.exports = className，Es6是export default className
3）定义组件的属性类型和默认属性，Es5里面，分别通过propsTypes和getDefaultProps来实现，Es6里面统一使用static
4）初始化state，Es5：getInitialState，
Es6：constructor(props){
  super(props);
}
5）方法回调，Es6需要xxxx.bind(this)或者箭头函数（e=>xxx(e)）来使用

4、localStorage、sessionStorage、cookie的使用
localStorage：长期保存在网站的数据，只能手动删除
sessionStorage：临时保存在窗口的数据，关闭窗口会删除这些数据
cookie：本地缓存，可以存放一些我们已经访问过的信息，但是不能存放用户信息，不安全
Cookie不是内置对象，所以用的时候需要new出来，Cookie是由服务端产生的，再发送给客户端保存，它不是内置对象，却是由服务端产生的，产生完后给了客户端
cookie清楚通过设定expire值

5、Ajax = JavaScript + XML
XMLHttpRequest是Ajax的基础
兼容IE5和IE6的写法：
var xmlhttp = ''
if (window.XMLHttpRequest)
{// code for IE7+, Firefox, Chrome, Opera, Safari
  xmlhttp=new XMLHttpRequest();
}
else
{// code for IE6, IE5
  xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
}
xmlhttp.open('GET', 'test1.txt', true) // 方法，URL，是否异步
xmlhttp.send();

get比post更快，但是不安全，有数量限制

6、jsonp
jsonp的核心原理就是目标页面回调本地页面的方法,并带入参数
<script type='text/javascript' src='https://xxxxxx?callback=functionName'
这里的functionName就是你写的函数的名字

7、axios
Axios是一个基于Promise的HTTP库
客户端使用，即把原来的ajax替换成axios，写法如下：
1）axios.get('/user', {id: '1234'}).then(res => {}).catch(err => {})
其中then是成功回调，catch是失败回调
2）axios.post('/user', {id: '1234'}).then(res => {}).catch(err => {})
也可以通过配置config来创建请求：
3）axios({
  method: 'post',
  url: 'http://jsonplaceholder.typicode.com/users',
  data: {
    id: '1234'
  }
}).then(res => {}).catch(err => {})
4）执行多个并发请求
function getUserAccount() {
  return axios.get('/user/12345');   //请求1
} 
function getUserPermissions() {
  return axios.get('/user/12345/permissions');   //请求2
}
axios.all([getUserAccount(), getUserPermissions()])
.then(axios.spread((res1, res2) => {
  //  res1是请求1的返回结果
  //  res2是请求2的返回结果
}))
5）创建实例
let instance = axios.create({
  url: '', // url是必需条件
  mthod: '',
  ...
})
6）添加拦截器
axios.interceptors.request.use(res => {
  //  在发送请求之前做些什么
  return res
}, error => {
  // 对请求错误做些什么
  return Promise.reject(error)
})
在Vue项目里面引用，可以通过单独建立一个js文件，Vue.prototype.$axios = axios
后面直接this.$axios.get|post|all()

8、fetch
fetch是一种HTTP请求方式，是XMLHttpRequest的一种替代方案，fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。
第一个参数是URL，使用了Promise对象来处理结果/回调
fetch(url)
.then(res => {
  return res.json() // http响应，不是真正的json数据，需要转换
})
.catch(err => {
  console.log(err)
})
第二个参数是可选参数，可以控制不同配置的init对象，
postData('http://example.com/answer', {answer: 42})
  .then(data => console.log(data)) // data已经是json数据
  .catch(error => console.error(error))

function postData(url, data) {
  return fetch(url, {
    body: JSON.stringify(data), // 必须和headers里面的content-type类型保持一致
    cache: 'no-cache',
    credentials: 'same-origin',
    headers: {
      'user-agent': 'Mozilla/4.0 MDN Example',
      'content-type': 'application/json'
    },
    method: 'POST',
    mode: 'cors',
    redirect: 'follow',
    referrer: 'no-referrer',
  })
  .then(response => response.json()) // 把返回的数据包成json格式
}
credentials：1）include（让浏览器发送包含凭据的请求（即使是跨域源））
             2）same-origin（只想在请求URL与调用脚本位于同一起源处时发送凭据）
             3）omit（确保浏览器不在请求中包含凭据）

上传文件：可以通过HTML<input type="file" />元素，FormData() 和fetch()上传文件

fetch和ajax的主要区别：
fetch返回promise不会拒绝http的错误状态，即使响应是http 404或者500
在默认情况下不会接受或者发送cookies

9、promise
存在的意义在于：将异步操作队列化，按照期望的顺序执行，返回符合预期的结果
详细的请参考官网：http://es6.ruanyifeng.com/#docs/promise

10、px、rem、em
px：是固定像素，无法自适应页面大小
rem：相对长度单位，适用于响应式布局，是相对于根元素<html>来设置，只需要确定一个根元素的值
em：相对长度单位，适用于响应式布局，em是相对于父元素设置，那就意味着必须设置每个父元素的大小

11、flex布局

12、Sass 、Scss、Less 和 Stylus区别总结
1、css预处理语言的概念：是一种语言，用来为 CSS 增加一些编程的的特性，无需考虑浏览器的兼容性问题，
可以在CSS中使用变量，简单的程序逻辑，函数等等在编程中，可以让CSS更加简洁，适应性更强，代码更直观。
2、基本语法区别
/*style.less or style.scss*/
h1{
  color: #0982C1;
}

/*style.sass*/ sass支持老的写法，不带花括号和结尾分号
h1
  color: #0982C1

/*style.styl*/ stylus支持不带花括号，不带冒号，不带结尾分号
h1{
  color: #0982C1;
}
h1
  color: #0982C1;
h1
  color #0982C1

3、变量
sass为css引入了变量（$开头），可以把反复使用的css属性值定义成变量（:隔开），通过变量引用：$borderLeft: solid 1px #ccc

less的变量是通过@开头，其他与sass一致：@leftPadding: 20px

stylus的变量没有任何设定，除了不能用@开头之外，还可以用：或者=隔开：borderRight: solid 2px red

嵌套：
父元素里面可以直接嵌套子元素，不用在层层声明

ul{
  li-style: none;
  li{
    color: red
  }
}

运算符：
预处理器中可以直接进行样式计算：
body{
  margin: (14px/2);
}

sass对颜色处理的函数：
lighten($color, 10%); 
darken($color, 10%);  
saturate($color, 10%);   
desaturate($color, 10%);
grayscale($color);  
complement($color); 
invert($color); 
mix($color1, $color2, 50%); 
用法：
$color: #0982C1;
h1{
  border: 1px solid darken($color, 50%)
}

less对颜色处理的函数：
lighten(@color, 10%); 
darken(@color, 10%);  
saturate(@color, 10%);  
desaturate(@color, 10%); 
spin(@color, 10); 
spin(@color, -10); 
mix(@color1, @color2);
用法：
@color: #0982C1;
h1{
  border: 1px solid darken(@color, 50%)
}

stylus对颜色处理的函数：
lighten(color, 10%); 
darken(color, 10%);  
saturate(color, 10%);  
desaturate(color, 10%); 
用法：
color: #0982C1;
h1{
  border: 1px solid darken(color, 50%)
}

sass可以通过@extend来实现代码组合声明，使代码更加简洁：
.message {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}
.success {
  @extend .message;
  border-color: green;
}
.error {
  @extend .message;
  border-color: red;
}

less相比：
.success {
  .message;
  border-color: green;
}
.error {
  .message;
  border-color: red;
}

混入语法
sass语法：
@mixin error($borderWidth: 2px) {
  border: $borderWidth solid #F00;
  color: #F00;
}
.generic-error {
  padding: 20px;
  margin: 4px;
  @ include error(); //这里调用默认 border: 2px solid #F00;
}

less语法：
.error($borderWidth: 2px) {
  border: $borderWidth solid #F00;
  color: #F00;
}
.generic-error {
  padding: 20px;
  margin: 4px;
  .error(); //这里调用默认 border: 2px solid #F00;
}






